import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt

# 1. Load & Clean Data
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional-full.csv"
df = pd.read_csv(url, sep=';')
df.drop(columns=['duration'], inplace=True)  # avoid data leakage

# 2. One-hot encode categorical vars
df_enc = pd.get_dummies(df, drop_first=True)

# 3. Split into X and y
X = df_enc.drop(columns=['y_yes'])
y = df_enc['y_yes']

# 4. Train/Test Split with stratification
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 5. Hyperparameter tuning with Grid Search
params = {'max_depth': [5, 10, 15], 'min_samples_leaf': [10, 20]}
grid = GridSearchCV(DecisionTreeClassifier(random_state=42, class_weight='balanced'),
                    param_grid=params, cv=5, scoring='f1', n_jobs=-1)
grid.fit(X_train, y_train)
clf = grid.best_estimator_

# 6. Evaluate performance
y_pred = clf.predict(X_test)
print(f"Best params: {grid.best_params_}")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.3f}")
print("Confusion matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification report:\n", classification_report(y_test, y_pred))

# 7. Plot top of tree
plt.figure(figsize=(18, 8))
plot_tree(clf, feature_names=X.columns, class_names=['No', 'Yes'],
          filled=True, max_depth=3, fontsize=10)
plt.title("Top Levels of Decision Tree")
plt.show()

# 8. Show top 10 feature importances
importances = pd.Series(clf.feature_importances_, index=X.columns).nlargest(10)
print("Top 10 Features:\n", importances)

# 9. Plot feature importances
plt.figure(figsize=(8, 6))
importances.plot(kind='barh')
plt.title("Feature Importance")
plt.gca().invert_yaxis()
plt.show()
